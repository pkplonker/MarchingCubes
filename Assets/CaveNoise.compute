#pragma kernel CSMain
#include "NoiseBase.compute"

RWStructuredBuffer<float4> Result;
RWStructuredBuffer<float3> octaveOffsets;
int3 size;
float scale;
float persistance;
float lacunarity;
float noiseExtents;
float vertDistance;
float3 worldOffset;
int octaves;
int3 worldChunk;
int3 maxChunk;

#define THREAD 8

[numthreads(THREAD,THREAD,THREAD)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)size.x || id.y >= (uint)size.y || id.z >= (uint)size.z)
    {
        return;
    }
    float localX = id.x * vertDistance;
    float localY = id.y * vertDistance;
    float localZ = id.z * vertDistance;
    // HACK
    // this creates a solid top
    if (maxChunk.y-1 == worldChunk.y && id.y >= (uint)size.y - 1)
    {
        float4 outputValue = float4(localX,localY,localZ, 1);
        Result[(size.x * size.y * id.z) + (size.y * id.y) + id.x] = outputValue;
        return;
    }
    // this creates a solid bottom
    if (worldChunk.y ==0 && id.y <= 0)
    {
        float4 outputValue = float4(localX,localY,localZ, 1);
        Result[(size.x * size.y * id.z) + (size.y * id.y) + id.x] = outputValue;
        return;
    }

    float amplitude = 1.0f;
    float frequency = 1.0f;
    float noiseHeight = 0.0f;

    for (int i = 0; i < octaves; i++)
    {
        float sampleX = (id.x) / scale * frequency + octaveOffsets[i].x * frequency;
        float sampleY = (id.y) / scale * frequency + octaveOffsets[i].y * frequency;
        float sampleZ = (id.z) / scale * frequency + octaveOffsets[i].z * frequency;

        float perlinValue = cnoise(float3(sampleX, sampleY, sampleZ));

        noiseHeight += perlinValue * amplitude;

        amplitude *= persistance;
        frequency *= lacunarity;
    }

    float normalizedHeight = InverseLerp(-noiseExtents, noiseExtents, noiseHeight);
    
    float4 outputValue = float4(localX,localY,localZ, normalizedHeight);

    Result[(size.x * size.y * id.z) + (size.y * id.y) + id.x] = outputValue;
}
