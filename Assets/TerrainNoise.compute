#pragma kernel CSMain
#include "NoiseBase.compute"


RWStructuredBuffer<float4> Result;
RWStructuredBuffer<float3> octaveOffsets;
int3 size;
float scale;
float persistance;
float lacunarity;
float noiseExtents;
float vertDistance;
float3 worldOffset;
int octaves;
int3 worldChunk;
int3 maxChunk;
float distanceFactor;
float groundHeight;
float isoLevel;
float amplitude;

float RoundToOneDecimalPlace(float value)
{
    return round(value * 10.0) / 10.0;
}

#define THREAD 8

[numthreads(THREAD, THREAD, THREAD)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)size.x || id.y >= (uint)size.y || id.z >= (uint)size.z)
    {
        return;
    }
    float localX = id.x * vertDistance;
    float localY = id.y * vertDistance;
    float localZ = id.z * vertDistance;

    float worldY = ((worldChunk.y * (size.y - 1)) * vertDistance) + localY;
    float maxY = ((maxChunk.y * (size.y - 1)) * vertDistance);

    float frequency = 1.0f;  
    float noiseHeight = 0.0f;

    for (int i = 0; i < octaves; i++)
    {
        float sampleX = (id.x) / scale * frequency + octaveOffsets[i].x * frequency;
        float sampleZ = (id.z) / scale * frequency + octaveOffsets[i].z * frequency;

        float perlinValue = cnoise(float2(sampleX, sampleZ));

        noiseHeight += perlinValue * amplitude;

        amplitude *= persistance;
        frequency *= lacunarity;
    }

    noiseHeight = InverseLerp(-noiseExtents, noiseExtents, noiseHeight);
    float gh = InverseLerp(0, maxY, noiseHeight) * maxY;

    float verticalFactor = 1.0f - abs(worldY - gh) / maxY; 

    verticalFactor = InverseLerp(0, 1, verticalFactor);

    float4 outputValue = float4(localX, localY, localZ, verticalFactor);

    Result[(size.x * size.y * id.z) + (size.y * id.y) + id.x] = outputValue;
}